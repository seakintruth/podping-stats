library(shiny)
library(DBI)
library(RPostgres)
library(glue)
authenticate_with_posgtres <- function(){
# Prompt user if password is not yet set
if (Sys.getenv("PGPASSWORD") == "") {
Sys.setenv(PGPASSWORD = readLines(file("~/env/read_all_user_access.txt")) )
}
# Set environment variables for pgsql connection
if (! Sys.getenv("PGHOST") == "127.0.0.1") {
Sys.setenv(PGHOST = "127.0.0.1")
}
if (! Sys.getenv("PGPORT") == "5432") {
Sys.setenv(PGPORT = "5432")
}
if (! Sys.getenv("PGUSER") == "read_all") {
#Sys.setenv(PGUSER = "postgres")
Sys.setenv(PGUSER = "read_all")
}
if (! Sys.getenv("PGDBNAME") == "plug_play") {
Sys.setenv(PGDBNAME = "plug_play")
}
}
dbFetchTable_Podping <- function(table_name){
# Connect to the default postgres database
connection <- DBI::dbConnect(RPostgres::Postgres(),dbname=Sys.getenv("PGDBNAME"))
ptm <- proc.time()
table_con <- DBI::dbSendQuery(connection,paste0( "SELECT * FROM ",table_name))
table_results <- dbFetch(table_con)
DBI::dbClearResult(table_con)
# Close the connection
proc.time() - ptm
DBI::dbDisconnect(connection)
return(table_results)
}
dbFetchQuery_Podping <- function(query_sql){
# Connect to the default postgres database
connection <- DBI::dbConnect(RPostgres::Postgres(),dbname=Sys.getenv("PGDBNAME"))
table_con <- DBI::dbSendQuery(connection,query_sql)
table_results <- dbFetch(table_con)
DBI::dbClearResult(table_con)
# Close the connection
DBI::dbDisconnect(connection)
return(table_results)
}
# When this changes we need to get new data
get_last_id <-function(){
dbFetchQuery_Podping(
"SELECT id FROM custom_json_ops ORDER BY id DESC LIMIT 1;"
)
}
str(get_last_id())
library(shiny)
library(DBI)
library(RPostgres)
library(glue)
authenticate_with_posgtres <- function(){
# Prompt user if password is not yet set
if (Sys.getenv("PGPASSWORD") == "") {
Sys.setenv(PGPASSWORD = readLines(file("~/env/read_all_user_access.txt")) )
}
# Set environment variables for pgsql connection
if (! Sys.getenv("PGHOST") == "127.0.0.1") {
Sys.setenv(PGHOST = "127.0.0.1")
}
if (! Sys.getenv("PGPORT") == "5432") {
Sys.setenv(PGPORT = "5432")
}
if (! Sys.getenv("PGUSER") == "read_all") {
#Sys.setenv(PGUSER = "postgres")
Sys.setenv(PGUSER = "read_all")
}
if (! Sys.getenv("PGDBNAME") == "plug_play") {
Sys.setenv(PGDBNAME = "plug_play")
}
}
dbFetchTable_Podping <- function(table_name){
# Connect to the default postgres database
connection <- DBI::dbConnect(RPostgres::Postgres(),dbname=Sys.getenv("PGDBNAME"))
ptm <- proc.time()
table_con <- DBI::dbSendQuery(connection,paste0( "SELECT * FROM ",table_name))
table_results <- dbFetch(table_con)
DBI::dbClearResult(table_con)
# Close the connection
proc.time() - ptm
DBI::dbDisconnect(connection)
return(table_results)
}
dbFetchQuery_Podping <- function(query_sql){
# Connect to the default postgres database
connection <- DBI::dbConnect(RPostgres::Postgres(),dbname=Sys.getenv("PGDBNAME"))
table_con <- DBI::dbSendQuery(connection,query_sql)
table_results <- dbFetch(table_con)
DBI::dbClearResult(table_con)
# Close the connection
DBI::dbDisconnect(connection)
return(table_results)
}
# When this changes we need to get new data
get_last_id <-function(){
dbFetchQuery_Podping(
"SELECT id FROM custom_json_ops ORDER BY id DESC LIMIT 1;"
)
}
get_host_summary <- function(number_of_days){
if (! Sys.getenv("PGPASSWORD") == "") {
#      dbFetchQuery_Podping(
#        cat(suppressWarnings(
#          readLines("sql/get_host_summary_prefix.sql_part1")
#          ))
#      )
dbFetchTable_Podping("podping_host_summary_last_day_sub_example")
}
}
get_url_timestamp <- function(){
if (! Sys.getenv("PGPASSWORD") == "") {
dbFetchTable_Podping("podping_url_timestamp")
}
}
get_url_count_by_day <- function(){
if (! Sys.getenv("PGPASSWORD") == "") {
dbFetchTable_Podping("podping_url_count_by_day")
}
}
get_url_count_by_hour <- function(){
if (! Sys.getenv("PGPASSWORD") == "") {
dbFetchTable_Podping("podping_url_count_by_hour")
}
}
get_url_count_by_minute <- function(){
if (! Sys.getenv("PGPASSWORD") == "") {
dbFetchTable_Podping("podping_url_count_by_minute")
}
}
# Define UI for application that draws a histogram
ui <- fluidPage(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "../../../../assets/css/main.css")
),
fluidRow(
HTML(
'<div class="topnav">
<a class="active" href="https://shiny.podping-stats.com/">Stats</a>
<a href="https://www.podping-stats.com/index.html">Toot Bot Reports</a>
<a href="https://www.podping-stats.com/contact.html">Contact</a>
<a href="https://www.podping-stats.com/about.html">About</a>
</div>'
)
),
# Application title
titlePanel("Hive.io Block Chain Podping Stats"),
# Show a plot of the generated distribution
# Main panel for displaying outputs ----
fluidRow(
verbatimTextOutput("debugging")
),
fluidRow(
DT::dataTableOutput("mytable1")
),
fluidRow(
# Adding a bunch of new lines at the end due to IFRAME hieght issues
# this is a dirty work around but it works!
HTML("<br/><br/><br/><br/><br/>")
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$debugging <- renderPrint(
last_id <- get_last_id()
message_out <- paste0("Results for the past day\n LastID:",last_id$id)
cat(message_out)
)
# choose columns to display
output$mytable1 <- DT::renderDataTable({
host_summary <- get_host_summary(1)
DT::datatable(host_summary)
})
}
# Define UI for application that draws a histogram
ui <- fluidPage(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "../../../../assets/css/main.css")
),
fluidRow(
HTML(
'<div class="topnav">
<a class="active" href="https://shiny.podping-stats.com/">Stats</a>
<a href="https://www.podping-stats.com/index.html">Toot Bot Reports</a>
<a href="https://www.podping-stats.com/contact.html">Contact</a>
<a href="https://www.podping-stats.com/about.html">About</a>
</div>'
)
),
# Application title
titlePanel("Hive.io Block Chain Podping Stats"),
# Show a plot of the generated distribution
# Main panel for displaying outputs ----
fluidRow(
verbatimTextOutput("debugging")
),
fluidRow(
DT::dataTableOutput("mytable1")
),
fluidRow(
# Adding a bunch of new lines at the end due to IFRAME hieght issues
# this is a dirty work around but it works!
HTML("<br/><br/><br/><br/><br/>")
)
)
output$debugging <- renderPrint(
last_id <- get_last_id()
message_out <- paste0("Results for the past day\n LastID:",last_id$id)
cat(message_out)
)
