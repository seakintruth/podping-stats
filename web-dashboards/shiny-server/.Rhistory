R.version
source("/data/OUD Bootcamp - Week 2/fwbootcampswelcomepackage/install-all-day-one-packages.r", echo=TRUE)
detach_package <- function(pkg, character.only = FALSE)
{
if(!character.only)
{
pkg <- deparse(substitute(pkg))
}
search_item <- paste("package", pkg, sep = ":")
while(search_item %in% search())
{
detach(search_item, unload = TRUE, character.only = TRUE)
}
}
#specify the packages of interest
packages = c("ggplot2","glmnet", "gridExtra")
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
problematic.packages <<- ""
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
loaded.correctly = FALSE
try({
install.packages(x)
loaded.correctly = require(x,  character.only = TRUE)
detach_package(x, character.only = T)
})
if (loaded.correctly == FALSE)
{
problematic.packages <<- paste(x, problematic.packages, sep=", ")
}
}
else
{
detach_package(x, character.only = T)
}
})
#print out those packages which require more work
cat("------------------------------------------------------------\n")
cat(paste("These packages could not be installed:",
problematic.packages,
"Remember this does not include reticulate, tensorflow or kears.",
"We install reticulate, tensorflow and keras later in this script", sep="\n"))
cat(paste("If any packages are listed as problematic:", "Please restart your R session and then run the script again by clicking the 'Source' button.", sep="\n"))
cat(paste("If that does not work please try typing:", "install.packages('PROBLEMATIC_PACKAGE_NAME')", "Any Warning messages can be ignored.", sep="\n"))
detach_package <- function(pkg, character.only = FALSE)
{
if(!character.only)
{
pkg <- deparse(substitute(pkg))
}
search_item <- paste("package", pkg, sep = ":")
while(search_item %in% search())
{
detach(search_item, unload = TRUE, character.only = TRUE)
}
}
#specify the packages of interest
packages = c("tidyverse","glmnet","smooth","matrixStats", "TSA", "TTR", "Metrics", "forecast", "shiny", "maps", "mapproj", "longCatEDA", "grid", "gridExtra", "devtools", "caret", "yardstick")
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
problematic.packages <<- ""
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
loaded.correctly = FALSE
try({
install.packages(x, dependencies = TRUE)
loaded.correctly = require(x,  character.only = TRUE)
detach_package(x, character.only = T)
})
if (loaded.correctly == FALSE)
{
problematic.packages <<- paste(x, problematic.packages, sep=", ")
}
}
else
{
detach_package(x, character.only = T)
}
})
#print out those packages which require more work
cat("------------------------------------------------------------\n")
cat(paste("These packages could not be installed:",
problematic.packages,
"Remember this does not include reticulate, tensorflow or kears.",
"We install reticulate, tensorflow and keras later in this script", sep="\n"))
cat(paste("If any packages are listed as problematic:", "Please restart your R session and then run the script again by clicking the 'Source' button.", sep="\n"))
cat(paste("If that does not work please try typing:", "install.packages('PROBLEMATIC_PACKAGE_NAME')", "Any Warning messages can be ignored.", sep="\n"))
install.packages(x, dependencies = TRUE)
detach_package <- function(pkg, character.only = FALSE)
{
if(!character.only)
{
pkg <- deparse(substitute(pkg))
}
search_item <- paste("package", pkg, sep = ":")
while(search_item %in% search())
{
detach(search_item, unload = TRUE, character.only = TRUE)
}
}
#specify the packages of interest
packages = c("tidyverse","glmnet","smooth","matrixStats", "TSA", "TTR", "Metrics", "forecast", "shiny", "maps", "mapproj", "longCatEDA", "grid", "gridExtra", "devtools", "caret", "yardstick")
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
problematic.packages <<- ""
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
loaded.correctly = FALSE
try({
install.packages(x, dependencies = TRUE)
loaded.correctly = require(x,  character.only = TRUE)
detach_package(x, character.only = T)
})
if (loaded.correctly == FALSE)
{
problematic.packages <<- paste(x, problematic.packages, sep=", ")
}
}
else
{
detach_package(x, character.only = T)
}
})
#print out those packages which require more work
cat("------------------------------------------------------------\n")
cat(paste("These packages could not be installed:",
problematic.packages,
"Remember this does not include reticulate, tensorflow or kears.",
"We install reticulate, tensorflow and keras later in this script", sep="\n"))
cat(paste("If any packages are listed as problematic:", "Please restart your R session and then run the script again by clicking the 'Source' button.", sep="\n"))
cat(paste("If that does not work please try typing:", "install.packages('PROBLEMATIC_PACKAGE_NAME')", "Any Warning messages can be ignored.", sep="\n"))
install.packages(x, dependencies = TRUE)
cat(paste("Now installing tensorflow if not configured:"))
tensorflow.exists.and.works = FALSE
if (require(tensorflow))
{
try({
tensorflow.exists.and.works = tensorflow:::tf_config()$available
tensorflow:::tf$constant('Hello, TensorFlow!')
tensorflow.exists.and.works = tensorflow.exists.and.works & TRUE
})
}
if (tensorflow.exists.and.works == FALSE)
{
try({
remove.packages(c("reticulate", "tensorflow", "keras"))
})
install.packages(c("reticulate", "tensorflow", "keras", dependencies = TRUE))
tensorflow::install_tensorflow(method="conda") # method="conda"
}
tensor.flow.is.avaiable = FALSE
found.numpy.without.issue = FALSE
loaded.keras.without.issue = FALSE
try({
# check that it installed without issue
my.tensorflow.config = tensorflow:::tf_config()
tensor.flow.is.avaiable = my.tensorflow.config$available
configured.on.system.without.issue = TRUE
# check for numpy
my.python.config = reticulate::py_config()
found.numpy.without.issue = !(is.null(my.python.config$numpy))
loaded.keras.without.issue = require(keras)
})
if (tensor.flow.is.avaiable & found.numpy.without.issue & loaded.keras.without.issue)
{
belt.and.suspenders.test = FALSE
try({
hello <- tensorflow:::tf$constant('Hello, TensorFlow!')
belt.and.suspenders.test = TRUE
})
if (belt.and.suspenders.test)
{
cat(paste("You have a working tensorflow, numpy and keras"))
}
} else {
cat(paste("You DO NOT have a working tensorflow, numpy and keras. See an instructor."))
}
detach_package <- function(pkg, character.only = FALSE)
{
if(!character.only)
{
pkg <- deparse(substitute(pkg))
}
search_item <- paste("package", pkg, sep = ":")
while(search_item %in% search())
{
detach(search_item, unload = TRUE, character.only = TRUE)
}
}
#specify the packages of interest
packages = c("tidyverse","glmnet","smooth","matrixStats", "TSA", "TTR", "Metrics", "forecast", "shiny", "maps", "mapproj", "longCatEDA", "grid", "gridExtra", "devtools", "caret", "yardstick")
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
problematic.packages <<- ""
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
loaded.correctly = FALSE
try({
install.packages(x, dependencies = TRUE)
loaded.correctly = require(x,  character.only = TRUE)
detach_package(x, character.only = T)
})
if (loaded.correctly == FALSE)
{
problematic.packages <<- paste(x, problematic.packages, sep=", ")
}
}
else
{
detach_package(x, character.only = T)
}
})
#print out those packages which require more work
cat("------------------------------------------------------------\n")
cat(paste("These packages could not be installed:",
problematic.packages,
"Remember this does not include reticulate, tensorflow or kears.",
"We install reticulate, tensorflow and keras later in this script", sep="\n"))
cat(paste("If any packages are listed as problematic:", "Please restart your R session and then run the script again by clicking the 'Source' button.", sep="\n"))
cat(paste("If that does not work please try typing:", "install.packages('PROBLEMATIC_PACKAGE_NAME')", "Any Warning messages can be ignored.", sep="\n"))
install.packages(x, dependencies = TRUE)
detach_package <- function(pkg, character.only = FALSE)
{
if(!character.only)
{
pkg <- deparse(substitute(pkg))
}
search_item <- paste("package", pkg, sep = ":")
while(search_item %in% search())
{
detach(search_item, unload = TRUE, character.only = TRUE)
}
}
#specify the packages of interest
packages = c("ggplot2","glmnet", "gridExtra")
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
problematic.packages <<- ""
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
loaded.correctly = FALSE
try({
install.packages(x)
loaded.correctly = require(x,  character.only = TRUE)
detach_package(x, character.only = T)
})
if (loaded.correctly == FALSE)
{
problematic.packages <<- paste(x, problematic.packages, sep=", ")
}
}
else
{
detach_package(x, character.only = T)
}
})
#print out those packages which require more work
cat("------------------------------------------------------------\n")
cat(paste("These packages could not be installed:",
problematic.packages,
"Remember this does not include reticulate, tensorflow or kears.",
"We install reticulate, tensorflow and keras later in this script", sep="\n"))
cat(paste("If any packages are listed as problematic:", "Please restart your R session and then run the script again by clicking the 'Source' button.", sep="\n"))
cat(paste("If that does not work please try typing:", "install.packages('PROBLEMATIC_PACKAGE_NAME')", "Any Warning messages can be ignored.", sep="\n"))
install.packages("tidyverse")
source("~/.active-rstudio-document", echo=TRUE)
pacman::p_install(rappdirs)
detach_package <- function(pkg, character.only = FALSE)
{
if(!character.only)
{
pkg <- deparse(substitute(pkg))
}
search_item <- paste("package", pkg, sep = ":")
while(search_item %in% search())
{
detach(search_item, unload = TRUE, character.only = TRUE)
}
}
#specify the packages of interest
packages = c("tidyverse","glmnet","smooth","matrixStats", "TSA", "TTR", "Metrics", "forecast", "shiny", "maps", "mapproj", "longCatEDA", "grid", "gridExtra", "devtools", "caret", "yardstick")
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
problematic.packages <<- ""
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
loaded.correctly = FALSE
try({
install.packages(x, dependencies = TRUE)
loaded.correctly = require(x,  character.only = TRUE)
detach_package(x, character.only = T)
})
if (loaded.correctly == FALSE)
{
problematic.packages <<- paste(x, problematic.packages, sep=", ")
}
}
else
{
detach_package(x, character.only = T)
}
})
#print out those packages which require more work
cat("------------------------------------------------------------\n")
cat(paste("These packages could not be installed:",
problematic.packages,
"Remember this does not include reticulate, tensorflow or kears.",
"We install reticulate, tensorflow and keras later in this script", sep="\n"))
cat(paste("If any packages are listed as problematic:", "Please restart your R session and then run the script again by clicking the 'Source' button.", sep="\n"))
cat(paste("If that does not work please try typing:", "install.packages('PROBLEMATIC_PACKAGE_NAME')", "Any Warning messages can be ignored.", sep="\n"))
install.packages(x, dependencies = TRUE)
detach_package <- function(pkg, character.only = FALSE)
{
if(!character.only)
{
pkg <- deparse(substitute(pkg))
}
search_item <- paste("package", pkg, sep = ":")
while(search_item %in% search())
{
detach(search_item, unload = TRUE, character.only = TRUE)
}
}
#specify the packages of interest
packages = c("tidyverse","glmnet","smooth","matrixStats", "TSA", "TTR", "Metrics", "forecast", "shiny", "maps", "mapproj", "longCatEDA", "grid", "gridExtra", "devtools", "caret", "yardstick")
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
problematic.packages <<- ""
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
loaded.correctly = FALSE
try({
install.packages(x, dependencies = TRUE)
loaded.correctly = require(x,  character.only = TRUE)
detach_package(x, character.only = T)
})
if (loaded.correctly == FALSE)
{
problematic.packages <<- paste(x, problematic.packages, sep=", ")
}
}
else
{
detach_package(x, character.only = T)
}
})
detach_package <- function(pkg, character.only = FALSE)
{
if(!character.only)
{
pkg <- deparse(substitute(pkg))
}
search_item <- paste("package", pkg, sep = ":")
while(search_item %in% search())
{
detach(search_item, unload = TRUE, character.only = TRUE)
}
}
#specify the packages of interest
packages = c("tidyverse","glmnet","smooth","matrixStats", "TSA", "TTR", "Metrics", "forecast", "shiny", "maps", "mapproj", "longCatEDA", "grid", "gridExtra", "devtools", "caret", "yardstick")
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
problematic.packages <<- ""
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
loaded.correctly = FALSE
try({
install.packages(x, dependencies = TRUE)
loaded.correctly = require(x,  character.only = TRUE)
detach_package(x, character.only = T)
})
if (loaded.correctly == FALSE)
{
problematic.packages <<- paste(x, problematic.packages, sep=", ")
}
}
else
{
detach_package(x, character.only = T)
}
})
#print out those packages which require more work
cat("------------------------------------------------------------\n")
cat(paste("These packages could not be installed:",
problematic.packages,
"Remember this does not include reticulate, tensorflow or kears.",
"We install reticulate, tensorflow and keras later in this script", sep="\n"))
cat(paste("If any packages are listed as problematic:", "Please restart your R session and then run the script again by clicking the 'Source' button.", sep="\n"))
cat(paste("If that does not work please try typing:", "install.packages('PROBLEMATIC_PACKAGE_NAME')", "Any Warning messages can be ignored.", sep="\n"))
install.packages(x, dependencies = TRUE)
pacman::p_install(yardstick, caret, devtools, forecast, TSA, smooth, glmnet)
pacman::p_install(yardstick)
pacman::p_install(caret)
pacman::p_install(devtools)
pacman::p_install(forecast)
pacman::p_install(TSA)
pacman::p_install(smooth)
pacman::p_install(glmnet)
pacman::p_install(yardstick)
pacman::p_load(yardstick)
pacman::p_load(plyr)
options("repos")[[1]][1]
pacman::p_load(yardstick)
pacman::p_install(caret)
pacman::p_install(devtools)
pacman::p_install(forecast)
pacman::p_install(TSA)
pacman::p_install(smooth)
pacman::p_install(glmnet)
pacman::p_load(plyr)
pacman::p_load(yardstick)
pacman::p_load(yardstick)
pacman::p_install(caret)
pacman::p_install(devtools)
pacman::p_install(forecast)
pacman::p_install(TSA)
pacman::p_install(smooth)
pacman::p_install(glmnet)
pacman::p_load(plyr)
detach_package <- function(pkg, character.only = FALSE)
{
if(!character.only)
{
pkg <- deparse(substitute(pkg))
}
search_item <- paste("package", pkg, sep = ":")
while(search_item %in% search())
{
detach(search_item, unload = TRUE, character.only = TRUE)
}
}
#specify the packages of interest
packages = c("tidyverse","glmnet","smooth","matrixStats", "TSA", "TTR", "Metrics", "forecast", "shiny", "maps", "mapproj", "longCatEDA", "grid", "gridExtra", "devtools", "caret", "yardstick")
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
problematic.packages <<- ""
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
loaded.correctly = FALSE
try({
install.packages(x, dependencies = TRUE)
loaded.correctly = require(x,  character.only = TRUE)
detach_package(x, character.only = T)
})
if (loaded.correctly == FALSE)
{
problematic.packages <<- paste(x, problematic.packages, sep=", ")
}
}
else
{
detach_package(x, character.only = T)
}
})
#print out those packages which require more work
cat("------------------------------------------------------------\n")
cat(paste("These packages could not be installed:",
problematic.packages,
"Remember this does not include reticulate, tensorflow or kears.",
"We install reticulate, tensorflow and keras later in this script", sep="\n"))
cat(paste("If any packages are listed as problematic:", "Please restart your R session and then run the script again by clicking the 'Source' button.", sep="\n"))
cat(paste("If that does not work please try typing:", "install.packages('PROBLEMATIC_PACKAGE_NAME')", "Any Warning messages can be ignored.", sep="\n"))
cat(paste("Now installing tensorflow if not configured:"))
tensorflow.exists.and.works = FALSE
if (require(tensorflow))
{
try({
tensorflow.exists.and.works = tensorflow:::tf_config()$available
tensorflow:::tf$constant('Hello, TensorFlow!')
tensorflow.exists.and.works = tensorflow.exists.and.works & TRUE
})
}
if (tensorflow.exists.and.works == FALSE)
{
try({
remove.packages(c("reticulate", "tensorflow", "keras"))
})
install.packages(c("reticulate", "tensorflow", "keras", dependencies = TRUE))
tensorflow::install_tensorflow(method="conda") # method="conda"
}
tensor.flow.is.avaiable = FALSE
found.numpy.without.issue = FALSE
loaded.keras.without.issue = FALSE
try({
# check that it installed without issue
my.tensorflow.config = tensorflow:::tf_config()
tensor.flow.is.avaiable = my.tensorflow.config$available
configured.on.system.without.issue = TRUE
# check for numpy
my.python.config = reticulate::py_config()
found.numpy.without.issue = !(is.null(my.python.config$numpy))
loaded.keras.without.issue = require(keras)
})
setwd("/srv/shiny-server")
q()
