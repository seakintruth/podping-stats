###########
#[TODO]
##############################
# Summary Statistics Reports #
##############################
# summary_Stats is used for the toot-bot
summary_Stats <- paste0(
'Podping hive "custom json" post report ',
"for the last ",
time_length_display,
":\n\t",
"Post count is ",
count_podping_data_unique,
" (", round(count_podping_data_unique/minutes_total,2),
" posts/min)\n\t",
"Total urls posted is ",
length(podcastUrls),
" of which ",
length(unique(podcastUrls)),
" are unique\n\t",
"\t(average of ",
round(length(podcastUrls)/count_podping_data_unique,2),
" urls/post)\n\t", summary_stats_not_podping_data,
"\nDetails at:\n" ,
"https://seakintruth.github.io/podping-stats/mastodon-toot-bot-hive/stats/?version=",
utils::URLencode(as.character(Sys.time())),
"\n#podping #Stats"
)
# export to last txt file
fileConn <- file("stats/lastSummary.txt")
writeLines(summary_Stats, fileConn)
close(fileConn)
# Build the reports for the github pages found at:
# https://seakintruth.github.io/podping-stats/mastodon-toot-bot-hive/stats/
# url count Summary:
customGreen0 = "#DeF7E9"
customGreen = "#71CA97"
customRed = "#FF7F7F"
powderBlue = "#B0E0E6"
formated_summary_table <- gt::gt(url_summary) %>%
tab_header(
title = paste0(
'Podping report ',
"for the last ",
time_length_display, ""),
subtitle = "Podping urls are 'custom json' posts on the Hive.io block chain"
) %>%
gt::tab_source_note(
paste0(
"Total urls posted is ",
length(podcastUrls),
" of which ",
length(unique(podcastUrls)),
" are unique\n\t",
"\t(average of ",
round(length(podcastUrls)/count_podping_data_unique,2),
" urls/post)\n\t", summary_stats_not_podping_data,
"#podping #Stats \n"
)
) %>%
tab_options(
column_labels.background.color = customGreen0,
heading.background.color = customGreen,
source_notes.background.color = customGreen0,
table.background.color  = powderBlue
)
# gt::gtsave(formated_summary_table,expand=10,filename="lastest-url-report.png",path="stats")
gt::gtsave(
formated_summary_table,
filename=paste0(report_name_prefix,"-url-report.html"),
path="stats"
)
# Last url Report HTML
md_last_url_report_html <- paste0(
read_lines(
file = paste0("stats/",report_name_prefix,"-url-report.html"),
skip = 1
),
collapse="\n"
)
# log the same stats
loggit::set_logfile("stats/summaryStats.ndjson")
message(summary_Stats)
md_past_reports <-paste0(
"# Past reports \n",
paste0(
"- [",list.files("stats",pattern="*.html"),"]",
"(",list.files("stats",pattern="*.html"),")\n",
collapse=""),
collapse=""
)
md_past_charts <- paste0(
"\n# Past charts",
paste0(
"\n![",list.files("stats",pattern="*.png"),"]",
"(",list.files("stats",pattern="*.png"),")",
collapse=""),
collapse=""
)
# Write the stats/index.md github pages files
readr::write_lines(
paste0(
"# Domain Stats\n",
md_last_url_report_html,
"\n",
md_past_reports,
md_past_charts, collapse=""
),
file = "stats/index.md"
)
png(file=chart_file_path,
width=900, height=600)
plot(
x=per_min_urls_chart_data_frame$time_bin,
y=per_min_urls_chart_data_frame$frequency,
type = "b",
xlab="Time",
col="red",
ylab=paste0("Items / ", pretty_frequency),
lty=1,
main=paste0(chart_title)
)
lines(
x=per_min_urls_chart_data_frame$time_bin,
y=per_min_post_chart_data$frequency,
type="o",
col="blue",
lty=2
)
lines(
x=as.data.frame(by_mins_domain_bins[1])$time_bin,
y=as.data.frame(by_mins_domain_bins[1])$frequency,
type="l",
col=domain_colors[1],
lty=1
)
lines(
x=as.data.frame(by_mins_domain_bins[2])$time_bin,
y=as.data.frame(by_mins_domain_bins[2])$frequency,
type="l",
col=domain_colors[2],
lty=2
)
lines(
x=as.data.frame(by_mins_domain_bins[3])$time_bin,
y=as.data.frame(by_mins_domain_bins[3])$frequency,
type="l",
col=domain_colors[3],
lty=3
)
lines(
x=as.data.frame(by_mins_domain_bins[4])$time_bin,
y=as.data.frame(by_mins_domain_bins[4])$frequency,
type="l",
col=domain_colors[4],
lty=4
)
lines(
x=as.data.frame(by_mins_domain_bins[5])$time_bin,
y=as.data.frame(by_mins_domain_bins[5])$frequency,
type="l",
col=domain_colors[5],
lty=5
)
legend(
"topleft",
legend=c("Url Count","Post Count",url_domains_to_graph),
col=c("red","blue",domain_colors), lty=c(1,2,1:5), cex=2
)
dev.off()
# podping_data
######################
# get the URLs from the json objects
# starting descriptive stats with
# https://bookdown.org/wadetroberts/bookdown-demo/descriptive-statistics-and-data-visualization.html
# json_str = stringr::str_replace_all(podping_data$json[1],"\\\\n",""),
# need to de-prettify the json
podping_data$json  <- podping_data$json %>%
stringr::str_replace_all("\\\\n","") %>%
stringr::str_replace_all("'","")  %>%
stringr::str_replace_all('\\"\\"','\\"')
podping_data$json_url <- lapply(podping_data$json,.getUrlFromPostJson)
podcastUrls <- unlist(podping_data$json_url)
if (exists("not_podping_data")) {
summary_stats_not_podping_data <- paste0(
'All other "custom json" hive post count is ',
count_not_podping_data_unique,
" (", round(count_not_podping_data_unique/minutes_total,2),
" posts/min)\n\t",
'Podping portion of all "custom json" posts on hive.io is ',
round(
100 * count_podping_data_unique /
(count_podping_data_unique+count_not_podping_data_unique),
5
),"%\n"
)
} else {
summary_stats_not_podping_data <- ""
}
###########
# predict #
###########
#[TODO]
##############################
# Summary Statistics Reports #
##############################
# summary_Stats is used for the toot-bot
summary_Stats <- paste0(
'Podping hive "custom json" post report ',
"for the last ",
time_length_display,
":\n\t",
"Post count is ",
count_podping_data_unique,
" (", round(count_podping_data_unique/minutes_total,2),
" posts/min)\n\t",
"Total urls posted is ",
length(podcastUrls),
" of which ",
length(unique(podcastUrls)),
" are unique\n\t",
"\t(average of ",
round(length(podcastUrls)/count_podping_data_unique,2),
" urls/post)\n\t", summary_stats_not_podping_data,
"\nDetails at:\n" ,
"https://seakintruth.github.io/podping-stats/mastodon-toot-bot-hive/stats/?version=",
utils::URLencode(as.character(Sys.time())),
"\n#podping #Stats"
)
# export to last txt file
fileConn <- file("stats/lastSummary.txt")
writeLines(summary_Stats, fileConn)
close(fileConn)
# Build the reports for the github pages found at:
# https://seakintruth.github.io/podping-stats/mastodon-toot-bot-hive/stats/
# url count Summary:
customGreen0 = "#DeF7E9"
customGreen = "#71CA97"
customRed = "#FF7F7F"
powderBlue = "#B0E0E6"
formated_summary_table <- gt::gt(url_summary) %>%
tab_header(
title = paste0(
'Podping report ',
"for the last ",
time_length_display, ""),
subtitle = "Podping urls are 'custom json' posts on the Hive.io block chain"
) %>%
gt::tab_source_note(
paste0(
"Total urls posted is ",
length(podcastUrls),
" of which ",
length(unique(podcastUrls)),
" are unique\n\t",
"\t(average of ",
round(length(podcastUrls)/count_podping_data_unique,2),
" urls/post)\n\t", summary_stats_not_podping_data,
"#podping #Stats \n"
)
) %>%
tab_options(
column_labels.background.color = customGreen0,
heading.background.color = customGreen,
source_notes.background.color = customGreen0,
table.background.color  = powderBlue
)
# gt::gtsave(formated_summary_table,expand=10,filename="lastest-url-report.png",path="stats")
gt::gtsave(
formated_summary_table,
filename=paste0(report_name_prefix,"-url-report.html"),
path="stats"
)
# Last url Report HTML
md_last_url_report_html <- paste0(
read_lines(
file = paste0("stats/",report_name_prefix,"-url-report.html"),
skip = 1
),
collapse="\n"
)
# log the same stats
loggit::set_logfile("stats/summaryStats.ndjson")
message(summary_Stats)
md_past_reports <-paste0(
"# Past reports \n",
paste0(
"- [",list.files("stats",pattern="*.html"),"]",
"(",list.files("stats",pattern="*.html"),")\n",
collapse=""),
collapse=""
)
md_past_charts <- paste0(
"\n# Past charts",
paste0(
"\n![",list.files("stats",pattern="*.png"),"]",
"(",list.files("stats",pattern="*.png"),")",
collapse=""),
collapse=""
)
# Write the stats/index.md github pages files
readr::write_lines(
paste0(
"# Domain Stats\n",
md_last_url_report_html,
"\n",
md_past_reports,
md_past_charts, collapse=""
),
file = "stats/index.md"
)
png(file=chart_file_path,
width=900, height=600)
plot(
x=per_min_urls_chart_data_frame$time_bin,
y=per_min_urls_chart_data_frame$frequency,
type = "b",
xlab="Time",
col="red",
ylab=paste0("Items / ", pretty_frequency),
lty=1,lwd = 3,
main=paste0(chart_title)
)
lines(
x=per_min_urls_chart_data_frame$time_bin,
y=per_min_post_chart_data$frequency,
type="o",lwd = 3,
col="blue",
lty=2
)
lines(
x=as.data.frame(by_mins_domain_bins[1])$time_bin,
y=as.data.frame(by_mins_domain_bins[1])$frequency,
type="l",lwd = 3,
col=domain_colors[1],
lty=1
)
lines(
x=as.data.frame(by_mins_domain_bins[2])$time_bin,
y=as.data.frame(by_mins_domain_bins[2])$frequency,
type="l",lwd = 3,
col=domain_colors[2],
lty=2
)
lines(
x=as.data.frame(by_mins_domain_bins[3])$time_bin,
y=as.data.frame(by_mins_domain_bins[3])$frequency,
type="l",lwd = 3,
col=domain_colors[3],
lty=3
)
lines(
x=as.data.frame(by_mins_domain_bins[4])$time_bin,
y=as.data.frame(by_mins_domain_bins[4])$frequency,
type="l",
col=domain_colors[4],
lty=4
)
lines(
x=as.data.frame(by_mins_domain_bins[5])$time_bin,
y=as.data.frame(by_mins_domain_bins[5])$frequency,
type="l",lwd = 3,
col=domain_colors[5],
lty=5
)
legend(
"topleft",
legend=c("Url Count","Post Count",url_domains_to_graph),
col=c("red","blue",domain_colors), lty=c(1,2,1:5), lwd = 3, cex=1.2
)
dev.off()
# podping_data
######################
# get the URLs from the json objects
# starting descriptive stats with
# https://bookdown.org/wadetroberts/bookdown-demo/descriptive-statistics-and-data-visualization.html
# json_str = stringr::str_replace_all(podping_data$json[1],"\\\\n",""),
# need to de-prettify the json
podping_data$json  <- podping_data$json %>%
stringr::str_replace_all("\\\\n","") %>%
stringr::str_replace_all("'","")  %>%
stringr::str_replace_all('\\"\\"','\\"')
podping_data$json_url <- lapply(podping_data$json,.getUrlFromPostJson)
podcastUrls <- unlist(podping_data$json_url)
if (exists("not_podping_data")) {
summary_stats_not_podping_data <- paste0(
'All other "custom json" hive post count is ',
count_not_podping_data_unique,
" (", round(count_not_podping_data_unique/minutes_total,2),
" posts/min)\n\t",
'Podping portion of all "custom json" posts on hive.io is ',
round(
100 * count_podping_data_unique /
(count_podping_data_unique+count_not_podping_data_unique),
5
),"%\n"
)
} else {
summary_stats_not_podping_data <- ""
}
###########
# predict #
###########
#[TODO]
##############################
# Summary Statistics Reports #
##############################
# summary_Stats is used for the toot-bot
summary_Stats <- paste0(
'Podping hive "custom json" post report ',
"for the last ",
time_length_display,
":\n\t",
"Post count is ",
count_podping_data_unique,
" (", round(count_podping_data_unique/minutes_total,2),
" posts/min)\n\t",
"Total urls posted is ",
length(podcastUrls),
" of which ",
length(unique(podcastUrls)),
" are unique\n\t",
"\t(average of ",
round(length(podcastUrls)/count_podping_data_unique,2),
" urls/post)\n\t", summary_stats_not_podping_data,
"\nDetails at:\n" ,
"https://seakintruth.github.io/podping-stats/mastodon-toot-bot-hive/stats/?version=",
utils::URLencode(as.character(Sys.time())),
"\n#podping #Stats"
)
# export to last txt file
fileConn <- file("stats/lastSummary.txt")
writeLines(summary_Stats, fileConn)
close(fileConn)
# Build the reports for the github pages found at:
# https://seakintruth.github.io/podping-stats/mastodon-toot-bot-hive/stats/
# url count Summary:
customGreen0 = "#DeF7E9"
customGreen = "#71CA97"
customRed = "#FF7F7F"
powderBlue = "#B0E0E6"
formated_summary_table <- gt::gt(url_summary) %>%
tab_header(
title = paste0(
'Podping report ',
"for the last ",
time_length_display, ""),
subtitle = "Podping urls are 'custom json' posts on the Hive.io block chain"
) %>%
gt::tab_source_note(
paste0(
"Total urls posted is ",
length(podcastUrls),
" of which ",
length(unique(podcastUrls)),
" are unique\n\t",
"\t(average of ",
round(length(podcastUrls)/count_podping_data_unique,2),
" urls/post)\n\t", summary_stats_not_podping_data,
"#podping #Stats \n"
)
) %>%
tab_options(
column_labels.background.color = customGreen0,
heading.background.color = customGreen,
source_notes.background.color = customGreen0,
table.background.color  = powderBlue
)
# gt::gtsave(formated_summary_table,expand=10,filename="lastest-url-report.png",path="stats")
gt::gtsave(
formated_summary_table,
filename=paste0(report_name_prefix,"-url-report.html"),
path="stats"
)
# Last url Report HTML
md_last_url_report_html <- paste0(
read_lines(
file = paste0("stats/",report_name_prefix,"-url-report.html"),
skip = 1
),
collapse="\n"
)
# log the same stats
loggit::set_logfile("stats/summaryStats.ndjson")
message(summary_Stats)
md_past_reports <-paste0(
"# Past reports \n",
paste0(
"- [",list.files("stats",pattern="*.html"),"]",
"(",list.files("stats",pattern="*.html"),")\n",
collapse=""),
collapse=""
)
md_past_charts <- paste0(
"\n# Past charts",
paste0(
"\n![",list.files("stats",pattern="*.png"),"]",
"(",list.files("stats",pattern="*.png"),")",
collapse=""),
collapse=""
)
# Write the stats/index.md github pages files
readr::write_lines(
paste0(
"# Domain Stats\n",
md_last_url_report_html,
"\n",
md_past_reports,
md_past_charts, collapse=""
),
file = "stats/index.md"
)
